<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Sit (aldebaran)" id="1" localization="8" tooltip="" x="1423" y="495">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.sitOnPod()
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def sitOnPod(self):
        motion = ALProxy("ALMotion")
        motion.setStiffnesses( "Body", 1. );
        names, times, keys = self._getSitOnPodMovement();
        motion.angleInterpolationBezier(names, times, keys);
        motion.rest()

    def _getSitOnPodMovement( self ):
        # Choregraphe bezier export in Python.
        names = list()
        times = list()
        keys = list()

        rChairBackOrientationOffset = 0.1;

        names.append("HeadPitch")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ 0.23926, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ 0.36826, [ 3, -0.17333, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.19017, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("HeadYaw")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -0.00311, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00763, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnklePitch")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ -0.16265, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ -0.11868, [ 3, -0.17333, -0.04321], [ 3, 0.22667, 0.05650]], [ 0.13648, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnkleRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.02305, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.01223, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowRoll")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ -1.25017, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ -1.39277, [ 3, -0.17333, 0.00000], [ 3, 0.22667, 0.00000]], [ -1.03387, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowYaw")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -1.23798, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -2.03566, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHand")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.00540, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00540, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipPitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -1.00166, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.95717 + rChairBackOrientationOffset, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -0.08433, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.00303, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipYawPitch")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ -0.23773, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ -0.27227, [ 3, -0.17333, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.02765, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LKneePitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 1.00780, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.27011, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderPitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 1.30386, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.60299, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.11347, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.30369, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LWristYaw")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.11347, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.42948, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnklePitch")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ -0.15796, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ -0.11868, [ 3, -0.17333, -0.03928], [ 3, 0.22667, 0.05136]], [ 0.19793, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnkleRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -0.02297, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.04913, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowRoll")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ 1.25025, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ 1.53065, [ 3, -0.17333, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.12140, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowYaw")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 1.23636, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.88218, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHand")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.00545, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 0.00545, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipPitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -1.00174, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.96493 + rChairBackOrientationOffset, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.08595, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.00149, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipYawPitch")
        times.append([ 1.40000, 1.92000, 2.60000])
        keys.append([ [ -0.23773, [ 3, -0.46667, 0.00000], [ 3, 0.17333, 0.00000]], [ -0.27227, [ 3, -0.17333, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.02765, [ 3, -0.22667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RKneePitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 1.00481, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.23951, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderPitch")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 1.29781, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ 1.68898, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderRoll")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ -0.11663, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.40042, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RWristYaw")
        times.append([ 1.40000, 2.60000])
        keys.append([ [ 0.08279, [ 3, -0.46667, 0.00000], [ 3, 0.40000, 0.00000]], [ -0.00004, [ 3, -0.40000, 0.00000], [ 3, 0.00000, 0.00000]]])

        return (names, times, keys);]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Stand (aldebaran)" id="2" localization="8" tooltip="" x="1431" y="643">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.standFromPod()
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def standFromPod(self):
        motion = ALProxy("ALMotion");
        motion.setStiffnesses( "Body", 1. );
        #motion.stiffnessInterpolation("Body", stiffness, 0.1);

        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ -0.02094, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ 0.41713, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.23926, [ 3, -0.22667, 0.08903], [ 3, 0.26667, -0.10474]], [ -0.16418, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("HeadYaw")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ -0.00311, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.00311, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnklePitch")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.58818, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.17977, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.16265, [ 3, -0.22667, -0.01712], [ 3, 0.26667, 0.02014]], [ 0.08586, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LAnkleRoll")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -0.11170, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.02305, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.13035, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowRoll")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ -1.20079, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ -1.54462, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ -1.25017, [ 3, -0.22667, -0.17384], [ 3, 0.26667, 0.20452]], [ -0.40954, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LElbowYaw")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -1.74358, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -1.23798, [ 3, -0.22667, -0.04564], [ 3, 0.26667, 0.05369]], [ -1.18429, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHand")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ 0.00540, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00540, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -1.77325, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -1.00166, [ 3, -0.22667, -0.29226], [ 3, 0.26667, 0.34384]], [ 0.13503, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipRoll")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ -0.08433, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.10129, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LHipYawPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -0.26180, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.23773, [ 3, -0.22667, -0.01473], [ 3, 0.26667, 0.01733]], [ -0.16563, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LKneePitch")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.84648, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.42244, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.00780, [ 3, -0.22667, 0.23195], [ 3, 0.26667, -0.27289]], [ -0.09208, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ 2.02807, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.30386, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ 1.48027, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LShoulderRoll")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.49044, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ 0.11347, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.12114, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("LWristYaw")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ 0.11347, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.12421, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnklePitch")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.58818, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ -0.17977, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.15796, [ 3, -0.22667, -0.02181], [ 3, 0.26667, 0.02566]], [ 0.09668, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RAnkleRoll")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.11170, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.02297, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.12890, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowRoll")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ 1.29678, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.54462, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.25025, [ 3, -0.22667, 0.17336], [ 3, 0.26667, -0.20395]], [ 0.41269, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RElbowYaw")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ 1.74358, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.23636, [ 3, -0.22667, 0.03651], [ 3, 0.26667, -0.04295]], [ 1.19341, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHand")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ 0.00545, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.00545, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -1.77325, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -1.00174, [ 3, -0.22667, -0.29178], [ 3, 0.26667, 0.34327]], [ 0.13188, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipRoll")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ 0.08595, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.10274, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RHipYawPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -0.26180, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.23773, [ 3, -0.22667, -0.01473], [ 3, 0.26667, 0.01733]], [ -0.16563, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RKneePitch")
        times.append([ 0.52000, 1.12000, 1.80000, 2.60000])
        keys.append([ [ 0.84648, [ 3, -0.17333, 0.00000], [ 3, 0.20000, 0.00000]], [ 1.42244, [ 3, -0.20000, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.00481, [ 3, -0.22667, 0.23100], [ 3, 0.26667, -0.27177]], [ -0.08586, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderPitch")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ 2.02807, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ 1.29781, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ 1.48342, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RShoulderRoll")
        times.append([ 1.12000, 1.80000, 2.60000])
        keys.append([ [ -0.49044, [ 3, -0.37333, 0.00000], [ 3, 0.22667, 0.00000]], [ -0.11663, [ 3, -0.22667, 0.00000], [ 3, 0.26667, 0.00000]], [ -0.11816, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        names.append("RWristYaw")
        times.append([ 1.80000, 2.60000])
        keys.append([ [ 0.08279, [ 3, -0.60000, 0.00000], [ 3, 0.26667, 0.00000]], [ 0.05518, [ 3, -0.26667, 0.00000], [ 3, 0.00000, 0.00000]]])

        motion.angleInterpolationBezier(names, times, keys);
        return True]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        </Box>
                        <Box name="Tactile Head" id="3" localization="8" tooltip="Detect touch on head tactile sensor." x="169" y="111">
                            <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                            <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                            <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                            <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                            </Box>
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                            <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Head-sequence" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say" id="4" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="418" y="406">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " I will stand up from the chair ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[I will stand up from the chair]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (1)" id="5" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="420" y="269">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " I will sit down on the chair ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[I will sit down on the chair]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Say (2)" id="6" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="417" y="98">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " normal stand up ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[normal stand up]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Goto Posture" id="7" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="657" y="112">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="StandInit" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                <Choice value="Crouch" />
                                <Choice value="LyingBack" />
                                <Choice value="LyingBelly" />
                                <Choice value="Sit" />
                                <Choice value="SitRelax" />
                                <Choice value="StandInit" />
                                <Choice value="Stand" />
                                <Choice value="StandZero" />
                            </Parameter>
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Bumpers" id="8" localization="8" tooltip="Listen to bumpers sensors. Stimulate onLeft or onRight output depending on&#x0A;which bumper is stimulated." x="179" y="8">
                            <bitmap>media/images/box/movement/move_foot.png</bitmap>
                            <bitmap>media/images/box/movement/move_leftfoot.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Input name="LeftBumperPressed" type="0" type_size="1" nature="4" stm_value_name="LeftBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                            <Input name="RightBumperPressed" type="0" type_size="1" nature="4" stm_value_name="RightBumperPressed" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="6" />
                            <Output name="onLeft" type="1" type_size="1" nature="2" inner="0" tooltip="When left bumper is stimulated." id="7" />
                            <Output name="onRight" type="1" type_size="1" nature="2" inner="0" tooltip="When right bumper is stimulated." id="8" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="196" y="61">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Box name="If &gt; 0" id="4" localization="8" tooltip="Transmit only if value is &gt; 0." x="197" y="165">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="0" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Output name="onStopped" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                            </Box>
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="4" />
                                            <Link inputowner="0" indexofinput="7" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="5" />
                                            <Link inputowner="0" indexofinput="8" outputowner="4" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Say (3)" id="9" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="418" y="12">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                                                <bitmap>media/images/box/interaction/say.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                                                <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                                                <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                                                <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                                            </Box>
                                            <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                                                <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.tts = ALProxy("ALTextToSpeech")
		self.sentences = {
			"Chinese" : " 你好 ",
			"English" : " That\'s all folks ",
			"French" : " Bonjour ",
			"German" : " Hallo ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Portuguese" : " Olá ",
			"Brazilian" : " Olá ",
			"Spanish" : " Hola ",
			"Arabic" : " مرحبا ",
			"Polish" : " Cześć ",
			"Czech" : " Ahoj ",
			"Dutch" : " Hallo ",
			"Danish" : " Hej ",
			"Finnish" : " Hei ",
			"Swedish" : " Hallå ",
			"Russian" : " Привет ",
			"Turkish" : " Merhaba "
		}

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
</content>
                                                </script>
                                                <pluginContent>
                                                    <chinese>
                                                        <![CDATA[你好]]>
</chinese>
                                                    <english>
                                                        <![CDATA[That's all folks]]>
</english>
                                                    <french>
                                                        <![CDATA[Bonjour]]>
</french>
                                                    <german>
                                                        <![CDATA[Hallo]]>
</german>
                                                    <italian>
                                                        <![CDATA[Ciao]]>
</italian>
                                                    <japanese>
                                                        <![CDATA[こんにちは]]>
</japanese>
                                                    <korean>
                                                        <![CDATA[안녕하세요]]>
</korean>
                                                    <portuguese>
                                                        <![CDATA[Olá]]>
</portuguese>
                                                    <brazilian>
                                                        <![CDATA[Olá]]>
</brazilian>
                                                    <spanish>
                                                        <![CDATA[Hola]]>
</spanish>
                                                    <arabic>
                                                        <![CDATA[مرحبا]]>
</arabic>
                                                    <polish>
                                                        <![CDATA[Cześć]]>
</polish>
                                                    <czech>
                                                        <![CDATA[Ahoj]]>
</czech>
                                                    <dutch>
                                                        <![CDATA[Hallo]]>
</dutch>
                                                    <danish>
                                                        <![CDATA[Hej]]>
</danish>
                                                    <finnish>
                                                        <![CDATA[Hei]]>
</finnish>
                                                    <swedish>
                                                        <![CDATA[Hallå]]>
</swedish>
                                                    <russian>
                                                        <![CDATA[Привет]]>
</russian>
                                                    <turkish>
                                                        <![CDATA[Merhaba]]>
</turkish>
                                                    <language>1</language>
                                                </pluginContent>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                                <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                            </Box>
                                            <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                            <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Set Stiffness" id="10" localization="8" tooltip="Stiffen the motors selected in parameters." x="716" y="6">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            self.motion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            self.motion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            self.motion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            self.motion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                            <Parameter name="Head" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                            <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                            <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                            <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                            <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                            <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="0" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                        </Box>
                        <Box name="Goto Posture (1)" id="11" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="564" y="8">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Crouch" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                <Choice value="Crouch" />
                                <Choice value="LyingBack" />
                                <Choice value="LyingBelly" />
                                <Choice value="Sit" />
                                <Choice value="SitRelax" />
                                <Choice value="StandInit" />
                                <Choice value="Stand" />
                                <Choice value="StandZero" />
                            </Parameter>
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Set Fall Manager" id="12" localization="8" tooltip="Enable or disable the Fall Manager.&#x0A;&#x0A;It is automatically set to its previous state when the behavior is stopped." x="632" y="257">
                            <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.bFallManagerEnabled = True

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.motion.setFallManagerEnabled(self.bFallManagerEnabled)

    def onInput_onSet(self):
        self.bFallManagerEnabled = self.motion.getFallManagerEnabled()
        enable = (self.getParameter("Action") == "Enable")
        self.motion.setFallManagerEnabled(enable)
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Disable" default_value="Enable" custom_choice="0" tooltip="Choose if you want to enable or disable the fall manager executing this box." id="4">
                                <Choice value="Disable" />
                                <Choice value="Enable" />
                            </Parameter>
                        </Box>
                        <Box name="Set Fall Manager (1)" id="13" localization="8" tooltip="Enable or disable the Fall Manager.&#x0A;&#x0A;It is automatically set to its previous state when the behavior is stopped." x="1119" y="221">
                            <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.bFallManagerEnabled = True

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.motion.setFallManagerEnabled(self.bFallManagerEnabled)

    def onInput_onSet(self):
        self.bFallManagerEnabled = self.motion.getFallManagerEnabled()
        enable = (self.getParameter("Action") == "Enable")
        self.motion.setFallManagerEnabled(enable)
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Choose if you want to enable or disable the fall manager executing this box." id="4">
                                <Choice value="Disable" />
                                <Choice value="Enable" />
                            </Parameter>
                        </Box>
                        <Box name="Set Fall Manager (2)" id="14" localization="8" tooltip="Enable or disable the Fall Manager.&#x0A;&#x0A;It is automatically set to its previous state when the behavior is stopped." x="634" y="410">
                            <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.bFallManagerEnabled = True

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.motion.setFallManagerEnabled(self.bFallManagerEnabled)

    def onInput_onSet(self):
        self.bFallManagerEnabled = self.motion.getFallManagerEnabled()
        enable = (self.getParameter("Action") == "Enable")
        self.motion.setFallManagerEnabled(enable)
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Disable" default_value="Enable" custom_choice="0" tooltip="Choose if you want to enable or disable the fall manager executing this box." id="4">
                                <Choice value="Disable" />
                                <Choice value="Enable" />
                            </Parameter>
                        </Box>
                        <Box name="Set Fall Manager (3)" id="15" localization="8" tooltip="Enable or disable the Fall Manager.&#x0A;&#x0A;It is automatically set to its previous state when the behavior is stopped." x="985" y="410">
                            <bitmap>media/images/box/sensors/fall_manager.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.bFallManagerEnabled = True

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        self.motion.setFallManagerEnabled(self.bFallManagerEnabled)

    def onInput_onSet(self):
        self.bFallManagerEnabled = self.motion.getFallManagerEnabled()
        enable = (self.getParameter("Action") == "Enable")
        self.motion.setFallManagerEnabled(enable)
        self.onDone()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                            <Parameter name="Action" inherits_from_parent="0" content_type="3" value="Enable" default_value="Enable" custom_choice="0" tooltip="Choose if you want to enable or disable the fall manager executing this box." id="4">
                                <Choice value="Disable" />
                                <Choice value="Enable" />
                            </Parameter>
                        </Box>
                        <Box name="Set Stiffness (1)" id="17" localization="8" tooltip="Stiffen the motors selected in parameters." x="664" y="607">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            self.motion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            self.motion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            self.motion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            self.motion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                            <Parameter name="Head" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                            <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                            <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                            <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                            <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                            <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                        </Box>
                        <Box name="Stand Up (dave)" id="16" localization="8" tooltip="" x="841" y="592">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="74">
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="HeadPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="3.95273" />
                                        <Key frame="38" value="5.18321" />
                                        <Key frame="50" value="5.18321" />
                                        <Key frame="62" value="5.18321" />
                                        <Key frame="74" value="5.18321" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="HeadYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-0.61764" />
                                        <Key frame="38" value="-0.61764" />
                                        <Key frame="50" value="-0.61764" />
                                        <Key frame="62" value="-0.61764" />
                                        <Key frame="74" value="-0.61764" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-7.64898" />
                                        <Key frame="38" value="-11.0768" />
                                        <Key frame="50" value="-11.0768" />
                                        <Key frame="62" value="-27.6004" />
                                        <Key frame="74" value="-62.4055" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="2.63916" />
                                        <Key frame="38" value="2.02391" />
                                        <Key frame="50" value="2.02391" />
                                        <Key frame="62" value="2.63916" />
                                        <Key frame="74" value="2.46338" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-56.2483" />
                                        <Key frame="38" value="-55.0178" />
                                        <Key frame="50" value="-55.0178" />
                                        <Key frame="62" value="-54.3147" />
                                        <Key frame="74" value="-54.3147" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-60.9114" />
                                        <Key frame="38" value="-62.7571" />
                                        <Key frame="50" value="-62.7571" />
                                        <Key frame="62" value="-65.3938" />
                                        <Key frame="74" value="-65.3938" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="1">
                                        <Key frame="26" value="0.5804" />
                                        <Key frame="38" value="0.5804" />
                                        <Key frame="50" value="0.5804" />
                                        <Key frame="62" value="0.5804" />
                                        <Key frame="74" value="0.5804" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-73.4751" />
                                        <Key frame="38" value="-87.6256" />
                                        <Key frame="50" value="-87.6256" />
                                        <Key frame="62" value="-74.1782" />
                                        <Key frame="74" value="-31.1992" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-0.173378" />
                                        <Key frame="38" value="-3.24959" />
                                        <Key frame="50" value="-3.24959" />
                                        <Key frame="62" value="-4.56796" />
                                        <Key frame="74" value="-4.56796" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-2.37068" />
                                        <Key frame="38" value="-6.2379" />
                                        <Key frame="50" value="-6.2379" />
                                        <Key frame="62" value="-7.46839" />
                                        <Key frame="74" value="-0.43705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="89.7351" />
                                        <Key frame="38" value="90.3503" />
                                        <Key frame="50" value="90.3503" />
                                        <Key frame="62" value="86.5709" />
                                        <Key frame="74" value="99.8426" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="79.9791" />
                                        <Key frame="38" value="73.2114" />
                                        <Key frame="50" value="73.2114" />
                                        <Key frame="62" value="89.9108" />
                                        <Key frame="74" value="89.9108" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="19.5096" />
                                        <Key frame="38" value="19.5096" />
                                        <Key frame="50" value="19.5096" />
                                        <Key frame="62" value="19.5096" />
                                        <Key frame="74" value="19.5096" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="49.7443" />
                                        <Key frame="38" value="50.3596" />
                                        <Key frame="50" value="50.3596" />
                                        <Key frame="62" value="49.7443" />
                                        <Key frame="74" value="49.7443" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-4.30429" />
                                        <Key frame="38" value="-5.53478" />
                                        <Key frame="50" value="-5.53478" />
                                        <Key frame="62" value="-25.9256" />
                                        <Key frame="74" value="-61.0823" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-5.44688" />
                                        <Key frame="38" value="-5.44688" />
                                        <Key frame="50" value="-5.44688" />
                                        <Key frame="62" value="-5.44688" />
                                        <Key frame="74" value="-5.44688" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="55.9894" />
                                        <Key frame="38" value="56.1652" />
                                        <Key frame="50" value="56.1652" />
                                        <Key frame="62" value="55.7258" />
                                        <Key frame="74" value="55.1105" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="69.3442" />
                                        <Key frame="38" value="72.4204" />
                                        <Key frame="50" value="72.4204" />
                                        <Key frame="62" value="69.8715" />
                                        <Key frame="74" value="69.2563" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="1">
                                        <Key frame="26" value="0.0588" />
                                        <Key frame="38" value="0.0588" />
                                        <Key frame="50" value="0.0588" />
                                        <Key frame="62" value="0.0588" />
                                        <Key frame="74" value="0.0588" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-71.1068" />
                                        <Key frame="38" value="-88" />
                                        <Key frame="50" value="-88" />
                                        <Key frame="62" value="-73.9193" />
                                        <Key frame="74" value="-34.456" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="6.41851" />
                                        <Key frame="38" value="7.64898" />
                                        <Key frame="50" value="7.64898" />
                                        <Key frame="62" value="7.64898" />
                                        <Key frame="74" value="2.02391" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-2.37068" />
                                        <Key frame="38" value="-6.2379" />
                                        <Key frame="50" value="-6.2379" />
                                        <Key frame="62" value="-7.46839" />
                                        <Key frame="74" value="-0.43705" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="84.2027" />
                                        <Key frame="38" value="84.8179" />
                                        <Key frame="50" value="84.8179" />
                                        <Key frame="62" value="85.1695" />
                                        <Key frame="74" value="103.363" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="85.4332" />
                                        <Key frame="38" value="76.2924" />
                                        <Key frame="50" value="76.2924" />
                                        <Key frame="62" value="93.1676" />
                                        <Key frame="74" value="93.7829" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-19.5144" />
                                        <Key frame="38" value="-17.405" />
                                        <Key frame="50" value="-17.405" />
                                        <Key frame="62" value="-19.0749" />
                                        <Key frame="74" value="-17.9323" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="26" value="-57.7473" />
                                        <Key frame="38" value="-57.7473" />
                                        <Key frame="50" value="-57.7473" />
                                        <Key frame="62" value="-58.5383" />
                                        <Key frame="74" value="-58.5383" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Goto Posture (2)" id="18" localization="8" tooltip="The robot goes from its current postition to the asked posture." x="991" y="564">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.nTries = 0
        self.postureProxy = ALProxy("ALRobotPosture")
        pass

    def onUnload(self):
        self.postureProxy.stopMove()

    def onInput_onStart(self):
        if(self.nTries != self.getParameter("Maximum of tries")):
            self.nTries = self.getParameter("Maximum of tries")
            self.postureProxy.setMaxTryNumber(self.nTries)

        result = self.postureProxy.goToPosture(self.getParameter("Name"), self.getParameter("Speed (%)")/100.)
        if(result):
            self.success()
        else:
            self.failure()
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="success" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture has been reached." id="4" />
                            <Output name="failure" type="1" type_size="1" nature="1" inner="0" tooltip="Stimulated if the posture could not be reached." id="5" />
                            <Parameter name="Name" inherits_from_parent="0" content_type="3" value="Stand" default_value="Stand" custom_choice="1" tooltip="Name of the posture to go to." id="6">
                                <Choice value="Crouch" />
                                <Choice value="LyingBack" />
                                <Choice value="LyingBelly" />
                                <Choice value="Sit" />
                                <Choice value="SitRelax" />
                                <Choice value="StandInit" />
                                <Choice value="Stand" />
                                <Choice value="StandZero" />
                            </Parameter>
                            <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="80" default_value="80" min="0" max="100" tooltip="Speed to go to the posture." id="7" />
                            <Parameter name="Maximum of tries" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="10" tooltip="The maximum number of fails of go to posture before stimulating the failure output." id="8" />
                            <Resource name="All motors" type="Lock" timeout="0" />
                            <Resource name="Stiffness" type="Lock" timeout="0" />
                        </Box>
                        <Box name="Sit (dave)" id="19" localization="8" tooltip="" x="894" y="231">
                            <bitmap>media/images/box/box-timeLine.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                            <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="75">
                                <ActuatorList model="">
                                    <ActuatorCurve name="value" actuator="LAnklePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-19.1628" />
                                        <Key frame="26" value="-18.987" />
                                        <Key frame="38" value="-22.5027" />
                                        <Key frame="51" value="-25.0515" />
                                        <Key frame="63" value="-25.0515" />
                                        <Key frame="75" value="-14.0651" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LAnkleRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-0.964409" />
                                        <Key frame="26" value="-0.964409" />
                                        <Key frame="38" value="-0.700723" />
                                        <Key frame="51" value="-0.0854867" />
                                        <Key frame="63" value="-0.0854867" />
                                        <Key frame="75" value="-1.0523" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-56.3362" />
                                        <Key frame="26" value="-56.3362" />
                                        <Key frame="38" value="-85.6041" />
                                        <Key frame="51" value="-86.1315" />
                                        <Key frame="63" value="-86.1315" />
                                        <Key frame="75" value="-88.0651" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LElbowYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-79.0171" />
                                        <Key frame="26" value="-76.2924" />
                                        <Key frame="38" value="-78.7534" />
                                        <Key frame="51" value="-79.5444" />
                                        <Key frame="63" value="-79.5444" />
                                        <Key frame="75" value="-82.0933" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHand" recordable="1" mute="0" unit="1">
                                        <Key frame="13" value="0.5808" />
                                        <Key frame="26" value="0.5808" />
                                        <Key frame="38" value="0.5808" />
                                        <Key frame="51" value="0.5808" />
                                        <Key frame="63" value="0.5808" />
                                        <Key frame="75" value="0.5804" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-58.7093" />
                                        <Key frame="26" value="-58.5335" />
                                        <Key frame="38" value="-83.5826" />
                                        <Key frame="51" value="-74.4419" />
                                        <Key frame="63" value="-74.4419" />
                                        <Key frame="75" value="-79.2759" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-0.524941" />
                                        <Key frame="26" value="-0.524941" />
                                        <Key frame="38" value="-1.31597" />
                                        <Key frame="51" value="-0.43705" />
                                        <Key frame="63" value="-0.43705" />
                                        <Key frame="75" value="1.05711" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LHipYawPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-2.89802" />
                                        <Key frame="26" value="-2.89802" />
                                        <Key frame="38" value="-4.04062" />
                                        <Key frame="51" value="2.63916" />
                                        <Key frame="63" value="2.63916" />
                                        <Key frame="75" value="1.84813" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LKneePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="60.2913" />
                                        <Key frame="26" value="60.2034" />
                                        <Key frame="38" value="89.0319" />
                                        <Key frame="51" value="100.809" />
                                        <Key frame="63" value="100.809" />
                                        <Key frame="75" value="94.9207" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="81.3853" />
                                        <Key frame="26" value="97.3816" />
                                        <Key frame="38" value="87.5378" />
                                        <Key frame="51" value="110.829" />
                                        <Key frame="63" value="110.829" />
                                        <Key frame="75" value="109.423" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LShoulderRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="13.0935" />
                                        <Key frame="26" value="13.0935" />
                                        <Key frame="38" value="13.1813" />
                                        <Key frame="51" value="13.1813" />
                                        <Key frame="63" value="13.1813" />
                                        <Key frame="75" value="13.0056" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="LWristYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-0.969218" />
                                        <Key frame="26" value="60.8187" />
                                        <Key frame="38" value="69.3442" />
                                        <Key frame="51" value="69.3442" />
                                        <Key frame="63" value="69.3442" />
                                        <Key frame="75" value="67.7621" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnklePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-20.3006" />
                                        <Key frame="26" value="-20.1248" />
                                        <Key frame="38" value="-23.1131" />
                                        <Key frame="51" value="-23.7284" />
                                        <Key frame="63" value="-23.7284" />
                                        <Key frame="75" value="-7.99575" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RAnkleRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-0.876518" />
                                        <Key frame="26" value="-0.876518" />
                                        <Key frame="38" value="-0.964409" />
                                        <Key frame="51" value="-0.0854867" />
                                        <Key frame="63" value="-0.0854867" />
                                        <Key frame="75" value="0.353968" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="56.5168" />
                                        <Key frame="26" value="44.3877" />
                                        <Key frame="38" value="73.5678" />
                                        <Key frame="51" value="71.6341" />
                                        <Key frame="63" value="71.6341" />
                                        <Key frame="75" value="73.5678" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RElbowYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="79.0123" />
                                        <Key frame="26" value="63.807" />
                                        <Key frame="38" value="83.7584" />
                                        <Key frame="51" value="85.7799" />
                                        <Key frame="63" value="85.7799" />
                                        <Key frame="75" value="87.2741" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHand" recordable="1" mute="0" unit="1">
                                        <Key frame="13" value="0.2548" />
                                        <Key frame="26" value="0.2548" />
                                        <Key frame="38" value="0.2548" />
                                        <Key frame="51" value="0.2548" />
                                        <Key frame="63" value="0.2548" />
                                        <Key frame="75" value="0.2596" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-59.593" />
                                        <Key frame="26" value="-59.2414" />
                                        <Key frame="38" value="-84.2906" />
                                        <Key frame="51" value="-74.0951" />
                                        <Key frame="63" value="-74.0951" />
                                        <Key frame="75" value="-79.7202" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="0.529749" />
                                        <Key frame="26" value="0.529749" />
                                        <Key frame="38" value="0.61764" />
                                        <Key frame="51" value="0.353968" />
                                        <Key frame="63" value="0.353968" />
                                        <Key frame="75" value="0.441859" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RHipYawPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-2.89802" />
                                        <Key frame="26" value="-2.89802" />
                                        <Key frame="38" value="-4.04062" />
                                        <Key frame="51" value="2.63916" />
                                        <Key frame="63" value="2.63916" />
                                        <Key frame="75" value="1.84813" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RKneePitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="62.845" />
                                        <Key frame="26" value="62.9329" />
                                        <Key frame="38" value="90.7067" />
                                        <Key frame="51" value="99.8474" />
                                        <Key frame="63" value="99.8474" />
                                        <Key frame="75" value="88.6852" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderPitch" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="81.478" />
                                        <Key frame="26" value="87.8941" />
                                        <Key frame="38" value="75.4135" />
                                        <Key frame="51" value="98.0017" />
                                        <Key frame="63" value="98.0896" />
                                        <Key frame="75" value="96.156" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RShoulderRoll" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="-16.0866" />
                                        <Key frame="26" value="-15.2956" />
                                        <Key frame="38" value="-4.04543" />
                                        <Key frame="51" value="-4.57277" />
                                        <Key frame="63" value="-4.57277" />
                                        <Key frame="75" value="-7.73688" />
                                    </ActuatorCurve>
                                    <ActuatorCurve name="value" actuator="RWristYaw" recordable="1" mute="0" unit="0">
                                        <Key frame="13" value="2.0191" />
                                        <Key frame="26" value="-45.4424" />
                                        <Key frame="38" value="-82.1812" />
                                        <Key frame="51" value="-82.2691" />
                                        <Key frame="63" value="-82.2691" />
                                        <Key frame="75" value="-80.1596" />
                                    </ActuatorCurve>
                                </ActuatorList>
                            </Timeline>
                        </Box>
                        <Box name="Set Stiffness (2)" id="20" localization="8" tooltip="Stiffen the motors selected in parameters." x="761" y="293">
                            <bitmap>media/images/box/movement/stiffness.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False
        self.motion = ALProxy("ALMotion")

    def onUnload(self):
        self.bIsRunning = False

    def setStiffness(self, stiffness):
        self.bIsRunning = True
        duration = self.getParameter("Duration (s)")
        if(self.getParameter("Head")):
            self.motion.post.stiffnessInterpolation("Head", stiffness, duration)
        if(self.getParameter("Left arm")):
            self.motion.post.stiffnessInterpolation("LArm", stiffness, duration)
        if(self.getParameter("Right arm")):
            self.motion.post.stiffnessInterpolation("RArm", stiffness, duration)
        if(self.getParameter("Left leg")):
            self.motion.post.stiffnessInterpolation("LLeg", stiffness, duration)
        if(self.getParameter("Right leg")):
            self.motion.post.stiffnessInterpolation("RLeg", stiffness, duration)
        time.sleep(duration)
        self.bIsRunning = False

    def onInput_onSet(self):
        if( self.bIsRunning ):
            return
        self.setStiffness(self.getParameter("Motors stiffness (%)")/100.)
        self.onReady() #~ activate output of the box]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="When this input is stimulated, the stiffness of the selected motors is set to&#x0A;the stiffness parameter value." id="2" />
                            <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when stiffness has been set." id="3" />
                            <Parameter name="Head" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="Do we want to modify the head stiffness?" id="4" />
                            <Parameter name="Left arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left arm stiffness?" id="5" />
                            <Parameter name="Right arm" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right arm stiffness?" id="6" />
                            <Parameter name="Left leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the left leg stiffness?" id="7" />
                            <Parameter name="Right leg" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Do we want to modify the right leg stiffness?" id="8" />
                            <Parameter name="Motors stiffness (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Stiffness value the motors are set to." id="9" />
                            <Parameter name="Duration (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0.02" max="10" tooltip="How much time to go to the max/min stiffness in seconds." id="10" />
                        </Box>
                        <Link inputowner="7" indexofinput="2" outputowner="6" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                        <Link inputowner="6" indexofinput="2" outputowner="3" indexofoutput="8" />
                        <Link inputowner="4" indexofinput="2" outputowner="3" indexofoutput="9" />
                        <Link inputowner="5" indexofinput="2" outputowner="3" indexofoutput="10" />
                        <Link inputowner="9" indexofinput="2" outputowner="8" indexofoutput="8" />
                        <Link inputowner="0" indexofinput="4" outputowner="10" indexofoutput="3" />
                        <Link inputowner="11" indexofinput="2" outputowner="9" indexofoutput="4" />
                        <Link inputowner="10" indexofinput="2" outputowner="11" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="12" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="13" indexofoutput="3" />
                        <Link inputowner="14" indexofinput="2" outputowner="4" indexofoutput="4" />
                        <Link inputowner="3" indexofinput="2" outputowner="15" indexofoutput="3" />
                        <Link inputowner="17" indexofinput="2" outputowner="14" indexofoutput="3" />
                        <Link inputowner="16" indexofinput="2" outputowner="17" indexofoutput="3" />
                        <Link inputowner="18" indexofinput="2" outputowner="16" indexofoutput="4" />
                        <Link inputowner="15" indexofinput="2" outputowner="18" indexofoutput="4" />
                        <Link inputowner="13" indexofinput="2" outputowner="19" indexofoutput="4" />
                        <Link inputowner="20" indexofinput="2" outputowner="12" indexofoutput="3" />
                        <Link inputowner="19" indexofinput="2" outputowner="20" indexofoutput="3" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
